<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- 使用阿里的druid配置数据源 start-->
	<!--具体查看官网信息：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!--这三个变量读取config.properties的-->
		<property name="url" value="jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="username" value="root"/>
		<property name="password" value="123456"/>

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="1"/>
		<!-- 初始化连接池最大使用连接数量 -->
		<property name="maxActive" value="20"/>
		<!-- 初始化连接池最小空闲 -->
		<property name="minIdle" value="1"/>

		<!-- 获取连接最大等待时间，单位毫秒-->
		<property name="maxWait" value="60000"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000"/>

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!--如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。-->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<property name="validationQuery" value="select 1 from dept"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>


		<!--当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接-->
		<!--配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。在上面的配置中，如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈。-->
		<!--具体查看官网信息：https://github.com/alibaba/druid/wiki/%E8%BF%9E%E6%8E%A5%E6%B3%84%E6%BC%8F%E7%9B%91%E6%B5%8B-->
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true"/>

		<!-- 配置监控统计拦截的filters-->
		<!--官网信息：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter-->
		<!--mergeSql可以合并输出的sql，方便查看，但是在mybatis框架中使用这个则无法监控sql,需要用stat-->
		<!--<property name="filters" value="mergeSql,log4j"/>-->
		<!--<property name="filters" value="mergeSql,wall"/>-->
		<!--<property name="filters" value="stat"/>-->
		<!--<property name="filters" value="mergeSql"/>-->
		<property name="filters" value="stat,log4j"/>
	</bean>
	<!-- 使用阿里的druid配置数据源 end-->

	<!-- Druid 和 Spring 关联监控配置 start-->
	<!-- 具体可以查阅官网：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_Druid%E5%92%8CSpring%E5%85%B3%E8%81%94%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE-->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />


	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>cn.luoze.scm.service.*</value>
				<!--如果使用的是 hibernate 则这里也要扫描路径，但是 mybatis 不需要-->
				<!--<value>com.youmeek.ssm.module.*.dao.*</value>-->
			</list>
		</property>
	</bean>
	<!--proxy-target-class="true"-->
	<aop:config>
		<!-- pointcut-ref="druid-stat-pointcut" 这个报红没事-->
		<aop:advisor advice-ref="druid-stat-interceptor"
					 pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	<!-- Druid 和 Spring 关联监控配置 end-->


	<!-- 配置session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:myBatis-config.xml" />
		<!--配置扫描式加载SQL映射文件,记得去掉mybatis-config配置-->
		<property name="mapperLocations" value="classpath:cn/luoze/scm/dao/*.xml"/>

	</bean>

	<!-- 配置事务管理器,管理数据源事务处理 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置事务通知 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 -->
			<tx:method name="insert*" propagation="REQUIRED"
					   rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
					   rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
					   rollback-for="Exception" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>


	<!-- 配置切面织入的范围,后边要把事务边界定在service层 -->
	<aop:config>
		<aop:advisor advice-ref="advice"
					 pointcut="execution(* cn.luoze.scm.service.impl.*.*(..))" />
	</aop:config>
	<!-- 配置SessionTemplate，已封装了繁琐的数据操作 -->



	<!-- 自动扫描组件，要把controller去除，他们是在spring-mvc.xml中配置，如果不去除会影响事务管理。 -->
	<context:component-scan base-package="cn.luoze">
		<context:exclude-filter type="annotation"
								expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 配置 转换器，对于在basePackage设置的包（包括子包）下的接口类，
	如果接口类的全类名在Mapper.xml文件中和定义过命名空间一致，
	 将被转换成spring的BEAN，在调用
		的地方通过@Autowired方式将可以注入接口实例 -->

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="basePackage" value="cn.luoze.scm.dao" />
	</bean>




</beans>